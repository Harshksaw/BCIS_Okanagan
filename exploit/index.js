const express = require('express');
const { default: data } = require('./extractEmails');
const { default: axios } = require('axios');
const fs = require('fs');
const FormData = require('form-data');

const app = express();
let cronJobIntervalId = null;

async function sendOtp(emails) {
    for (let email of emails) {
        console.log(email);
        try {
            const res = await axios.post('https://system.krishnaacademy.in/api/v1/auth/reset-password-token', {
                email: email
            });
            console.log(email, res.data);
        } catch (error) {
            console.error(`Failed to send OTP to ${email}:`, error.message);
        }
    }
    return true;
}

app.get('/otp', async (req, res) => {
    const emails = data.data
        .filter(item => typeof item.email === 'string')
        .map(item => item.email);
    console.log(emails);

    try {
        await sendOtp(emails);
        res.send('OTP sent to all emails');
    } catch (error) {
        res.status(500).send('Error sending OTPs: ' + error.message);
    }
});

// Function to make the actual API call
async function callApi() {
    try {
        console.log(`[${new Date().toISOString()}] Making API call...`);
        const form = new FormData();
        form.append('video', fs.createReadStream('video.mp4'));

        // Make the actual API call
        const response = await axios.post('https://system.krishnaacademy.in/api/v1/video', form, {
            headers: {
                ...form.getHeaders()
            }
        });
        
        console.log(`API call successful:`, response.data);
    } catch (error) {
        console.error(`API call failed:`, error.message);
    }
}

// Function to make continuous API calls every 10 seconds
function setupApiCronJob() {
    console.log('Starting API cron job - will call API every 10 seconds');
    
    // Initial call
    callApi();
    
    // Set up interval for subsequent calls (10000 ms = 10 seconds)
    const intervalId = setInterval(callApi, 10000);
    
    // Return the interval ID in case you need to stop it later
    return intervalId;
}

// Endpoint to start the cron job
app.get('/start-cron', (req, res) => {
    if (cronJobIntervalId) {
        return res.status(400).send('Cron job already running');
    }
    
    cronJobIntervalId = setupApiCronJob();
    res.send('API cron job started');
});

// Endpoint to stop the cron job
app.get('/stop-cron', (req, res) => {
    if (!cronJobIntervalId) {
        return res.status(400).send('No cron job running');
    }
    
    clearInterval(cronJobIntervalId);
    cronJobIntervalId = null;
    res.send('API cron job stopped');
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});